# fx_dashboard_app.py ‚Äî –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å –ª–æ–≥–∏–∫–∏ –∏–∑ PHP –≤ Python (Streamlit)
# macOS: pip install streamlit requests pandas pydantic python-dotenv
# –ó–∞–ø—É—Å–∫: streamlit run main.py

import hmac
import hashlib
import time
import os
from typing import Dict, Any, Optional
import math

import requests
import streamlit as st
import pandas as pd
from pydantic import BaseModel
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

st.set_page_config(page_title="FX Dashboard (Python-only)", layout="wide")
st.title("üí± FX Dashboard ‚Äî Python only")
st.caption("–ö—É—Ä—Å—ã –∏–∑ Bitkub + Rapira –±–µ–∑ PHP, —Ä–∞—Å—á—ë—Ç –º–∞—Ä–∂–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö –ø—Ä—è–º–æ –≤ Python.")

# ---------- –ö–æ–Ω—Ñ–∏–≥ –≤ —Å–∞–π–¥–±–∞—Ä–µ ----------
st.sidebar.header("üîß –ò—Å—Ç–æ—á–Ω–∏–∫–∏ API")
rapira_url = st.sidebar.text_input(
    "Rapira rates endpoint",
    value=os.getenv("RAPIRA_URL", "https://api.rapira.net/open/market/rates"),
)

bitkub_server_time_url = st.sidebar.text_input(
    "Bitkub server time",
    value=os.getenv("BITKUB_SERVER_TIME_URL", "https://api.bitkub.com/api/servertime"),
)
bitkub_ticker_url = st.sidebar.text_input(
    "Bitkub ticker (THB_USDT)",
    value=os.getenv("BITKUB_TICKER_URL", "https://api.bitkub.com/api/market/ticker?sym=THB_USDT"),
)

st.sidebar.subheader("Bitkub auth (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
bitkub_api_key = st.sidebar.text_input("X-BTK-APIKEY", value=os.getenv("BITKUB_API_KEY", ""), type="password")
bitkub_api_secret = st.sidebar.text_input("X-BTK-SECRET", value=os.getenv("BITKUB_API_SECRET", ""), type="password")

st.sidebar.subheader("–ú–∞—Ä–∂–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
usdt_margin = st.sidebar.number_input("% –º–∞—Ä–∂–∏ –¥–ª—è USDT‚ÜíTHB", value=float(os.getenv("USDT_MARGIN", "2.5")), step=0.1)
rub_margin = st.sidebar.number_input("% –º–∞—Ä–∂–∏ –¥–ª—è RUB‚ÜíTHB", value=float(os.getenv("RUB_MARGIN", "3.5")), step=0.1)

# ---------- –ú–æ–¥–µ–ª–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã ----------
class FxResult(BaseModel):
    usd_rub_base: float
    usd_rub_plus_3_5: float
    usd_rub_plus_7: float

    thb_usd: float
    thb_usd_2_5: float
    thb_usd_2_75: float
    thb_usd_3: float

    conversion_rate_base: float  # RUB/THB –±–µ–∑ –º–∞—Ä–∂–∏
    conversion_rate_plus_3_5: float
    conversion_rate_plus_4: float
    conversion_rate_plus_5: float
    conversion_rate_plus_6: float
    conversion_rate_plus_7: float

    rate: float  # –æ—Å–Ω–æ–≤–Ω–æ–π (—Å 3.5%)


def sign_bitkub(timestamp: str, method: str, path_and_query: str, secret: str) -> str:
    payload = f"{timestamp}{method}{path_and_query}"
    return hmac.new(secret.encode(), payload.encode(), hashlib.sha256).hexdigest()


def fetch_bitkub_thb_usdt(
    server_time_url: str,
    ticker_url: str,
    api_key: Optional[str] = None,
    api_secret: Optional[str] = None,
) -> float:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–Ω—É THB_USDT['last']. –ï—Å–ª–∏ –Ω–µ —É–¥–∞—ë—Ç—Å—è –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏, –ø—Ä–æ–±—É–µ—Ç —Å –ø–æ–¥–ø–∏—Å—å—é (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–ª—é—á–∏)."""
    # 1) –ü—ã—Ç–∞–µ–º—Å—è –±–µ–∑ –ø–æ–¥–ø–∏—Å–µ–π
    try:
        r = requests.get(ticker_url, timeout=10)
        r.raise_for_status()
        data = r.json()
        last = float(data["THB_USDT"]["last"])  # Bitkub —Ñ–æ—Ä–º–∞—Ç –∫–∞–∫ –≤ PHP
        return last
    except Exception:
        pass

    # 2) –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    if not api_key or not api_secret:
        raise RuntimeError("Bitkub —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–ø–∏—Å—å: —É–∫–∞–∂–∏ API KEY –∏ SECRET –∏–ª–∏ —Å–¥–µ–ª–∞–π endpoint –ø—É–±–ª–∏—á–Ω—ã–º")

    ts = requests.get(server_time_url, timeout=10).text.strip()
    # –í—ã—Ä–µ–∑–∞–µ–º –ø—É—Ç—å –∏ query –∏–∑ –ø–æ–ª–Ω–æ–≥–æ URL
    # –ù–∞–ø—Ä–∏–º–µ—Ä: https://api.bitkub.com/api/market/ticker?sym=THB_USDT -> /api/market/ticker?sym=THB_USDT
    path_and_query = "/" + ticker_url.split("//", 1)[-1].split("/", 1)[-1]
    signature = sign_bitkub(ts, "GET", path_and_query, api_secret)

    headers = {
        "Accept": "application/json",
        "Content-type": "application/json",
        "X-BTK-APIKEY": api_key,
        "X-BTK-TIMESTAMP": ts,
        "X-BTK-SIGN": signature,
    }
    r = requests.get(ticker_url, headers=headers, timeout=10)
    r.raise_for_status()
    data = r.json()
    last = float(data["THB_USDT"]["last"])  # –∫–∞–∫ –≤ PHP
    return last


def fetch_rapira_usdt_rub(rapira_url: str) -> float:
    r = requests.get(rapira_url, timeout=10)
    r.raise_for_status()
    payload = r.json()
    items = payload.get("data") or []
    for it in items:
        if it.get("symbol") == "USDT/RUB":
            bid = float(it["bidPrice"])  # –∫–∞–∫ –≤ PHP –±–µ—Ä—ë–º bidPrice
            return bid
    raise RuntimeError("USDT/RUB –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ Rapira")


def compute_rates(rapira_usd_rub: float, thb_usd: float) -> FxResult:
    usd_rub_base = round(rapira_usd_rub * 1.04, 2)  # –∫–∞–∫ –≤ —Ç–≤–æ—ë–º PHP getRapiraUsdRubRate()

    res = FxResult(
        usd_rub_base=round(usd_rub_base, 3),
        usd_rub_plus_3_5=round(usd_rub_base * 1.035, 3),
        usd_rub_plus_7=round(usd_rub_base * 1.07, 3),
        thb_usd=round(thb_usd, 2),
        thb_usd_2_5=round(thb_usd * 0.975, 3),
        thb_usd_2_75=round(thb_usd * 0.9725, 3),
        thb_usd_3=round(thb_usd * 0.97, 3),
        conversion_rate_base=round(usd_rub_base / thb_usd, 3),
        conversion_rate_plus_3_5=round((usd_rub_base * 1.035) / thb_usd, 3),
        conversion_rate_plus_4=round((usd_rub_base * 1.04) / thb_usd, 3),
        conversion_rate_plus_5=round((usd_rub_base * 1.05) / thb_usd, 3),
        conversion_rate_plus_6=round((usd_rub_base * 1.06) / thb_usd, 3),
        conversion_rate_plus_7=round((usd_rub_base * 1.07) / thb_usd, 3),
        rate=round((usd_rub_base * 1.035) / thb_usd, 3),
    )
    return res

# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ä–∞—Å—á—ë—Ç ----------
colA, colB, colC = st.columns([1,1,1])
with colA:
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å", use_container_width=True):
        st.rerun()

# –¢—è–Ω–µ–º –¥–∞–Ω–Ω—ã–µ
try:
    thb_usdt_last = fetch_bitkub_thb_usdt(
        bitkub_server_time_url,
        bitkub_ticker_url,
        bitkub_api_key or None,
        bitkub_api_secret or None,
    )
    # –í—ã—á–∏—Ç–∞–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É 0.1 –∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ
    thb_usdt_last = round(thb_usdt_last - 0.1, 2)
    rapira_usdt_rub = fetch_rapira_usdt_rub(rapira_url)
    fx = compute_rates(rapira_usdt_rub, thb_usdt_last)
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏/—Ä–∞—Å—á—ë—Ç–∞: {e}")
    st.stop()

# ---------- –í—ã–≤–æ–¥ –±–∞–∑–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π ----------
col1, col2, col3 = st.columns(3)
col1.metric("usdt_rub_base (RUB –∑–∞ 1 USDT)", f"{fx.usd_rub_base:.3f}")
col2.metric("thb_usdt (THB –∑–∞ 1 USDT)", f"{fx.thb_usd:.3f}")
col3.metric("RUB‚ÜíTHB (–±–µ–∑ –º–∞—Ä–∂–∏)", f"{fx.conversion_rate_base:.3f}")

st.divider()

# ---------- –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ----------
st.subheader("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—é
st.info("üí° **–ö–∞–∫ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å:** –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É Copy Ru/En, –∑–∞—Ç–µ–º –≤—ã–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤ –ø–æ—è–≤–∏–≤—à–µ–º—Å—è –±–ª–æ–∫–µ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ (Ctrl+C / Cmd+C)")

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
tab1, tab2 = st.tabs(["üí± USDT ‚Üî THB", "üíµ RUB ‚Üî THB"])

with tab1:
    st.write("**–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è USDT ‚Üî THB (–∫–ª–∏–µ–Ω—Ç –≤—Å–µ–≥–¥–∞ –æ—Ç–¥–∞—ë—Ç USDT)**")
    
    col_usdt1, col_usdt2 = st.columns(2)
    
    with col_usdt1:
        st.write("**–°–∫–æ–ª—å–∫–æ –±–∞—Ç –Ω—É–∂–Ω–æ –∫–ª–∏–µ–Ω—Ç—É?**")
        thb_needed = st.number_input("–°–∫–æ–ª—å–∫–æ THB –Ω—É–∂–Ω–æ?", value=30000.0, step=1000.0, key="thb_needed")
        # –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ USDT –¥–æ–ª–∂–µ–Ω –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç
        usdt_to_pay = thb_needed / (fx.thb_usd * (1 - usdt_margin/100))
        # –û–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö –≤ –ø–æ–ª—å–∑—É –∫–ª–∏–µ–Ω—Ç–∞ (–∫–ª–∏–µ–Ω—Ç –ø–ª–∞—Ç–∏—Ç –ë–û–õ–¨–®–ï)
        usdt_to_pay = math.ceil(usdt_to_pay)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
        thb_formatted = f"{thb_needed:,.0f}" if thb_needed.is_integer() else f"{thb_needed:,.2f}"
        usdt_formatted = f"{usdt_to_pay:,.0f}"
        
        # –ö—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        st.info(f"""
        **üí± USDT ‚Üí THB**
        
        **–ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç:** {thb_formatted} ‡∏ø  
        **–ö–ª–∏–µ–Ω—Ç –ø–ª–∞—Ç–∏—Ç:** {usdt_formatted} USDT  
        **–ö—É—Ä—Å —Å –º–∞—Ä–∂–µ–π:** {fx.thb_usd * (1 - usdt_margin/100):.2f}
        """)
        
        # –ö–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä—è–¥
        col_copy1, col_copy2 = st.columns(2)
        with col_copy1:
            if st.button("üá∑üá∫ Copy Ru", key="copy_usdt_to_thb_ru", use_container_width=True):
                usdt_to_thb_text_ru = f"""üí± USDT ‚Üí THB
–ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç: {thb_formatted} ‡∏ø
–ö–ª–∏–µ–Ω—Ç –ø–ª–∞—Ç–∏—Ç: {usdt_formatted} USDT
–ö—É—Ä—Å —Å –º–∞—Ä–∂–µ–π: {fx.thb_usd * (1 - usdt_margin/100):.2f}"""
                st.success("‚úÖ –¢–µ–∫—Å—Ç –≥–æ—Ç–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è!")
                st.code(usdt_to_thb_text_ru, language=None)
        
        with col_copy2:
            if st.button("üá∫üá∏ Copy En", key="copy_usdt_to_thb_en", use_container_width=True):
                usdt_to_thb_text_en = f"""üí± USDT ‚Üí THB
Client receives: {thb_formatted} ‡∏ø
Client pays: {usdt_formatted} USDT
Rate with margin: {fx.thb_usd * (1 - usdt_margin/100):.2f}"""
                st.success("‚úÖ Text ready for copying!")
                st.code(usdt_to_thb_text_en, language=None)
    
    with col_usdt2:
        st.write("**–°–∫–æ–ª—å–∫–æ USDT —É –∫–ª–∏–µ–Ω—Ç–∞?**")
        usdt_available = st.number_input("–°–∫–æ–ª—å–∫–æ USDT —É –∫–ª–∏–µ–Ω—Ç–∞?", value=1000.0, step=100.0, key="usdt_available")
        # –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ THB –ø–æ–ª—É—á–∏—Ç –∫–ª–∏–µ–Ω—Ç
        thb_received = usdt_available * (fx.thb_usd * (1 - usdt_margin/100))
        # –û–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑ –≤ –ø–æ–ª—å–∑—É –∫–ª–∏–µ–Ω—Ç–∞ (–∫–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç –ú–ï–ù–¨–®–ï)
        thb_received = math.floor(thb_received)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
        usdt_formatted_rev = f"{usdt_available:,.0f}" if usdt_available.is_integer() else f"{usdt_available:,.2f}"
        thb_formatted_rev = f"{thb_received:,.0f}"
        
        # –ö—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        st.info(f"""
        **üí± USDT ‚Üí THB**
        
        **–ö–ª–∏–µ–Ω—Ç –ø–ª–∞—Ç–∏—Ç:** {usdt_formatted_rev} USDT  
        **–ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç:** {thb_formatted_rev} ‡∏ø  
        **–ö—É—Ä—Å —Å –º–∞—Ä–∂–µ–π:** {fx.thb_usd * (1 - usdt_margin/100):.2f}
        """)
        
        # –ö–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä—è–¥
        col_copy3, col_copy4 = st.columns(2)
        with col_copy3:
            if st.button("üá∑üá∫ Copy Ru", key="copy_thb_to_usdt_ru", use_container_width=True):
                thb_to_usdt_text_ru = f"""üí± USDT ‚Üí THB
–ö–ª–∏–µ–Ω—Ç –ø–ª–∞—Ç–∏—Ç: {usdt_formatted_rev} USDT
–ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç: {thb_formatted_rev} ‡∏ø
–ö—É—Ä—Å —Å –º–∞—Ä–∂–µ–π: {fx.thb_usd * (1 - usdt_margin/100):.2f}"""
                st.success("‚úÖ –¢–µ–∫—Å—Ç –≥–æ—Ç–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è!")
                st.code(thb_to_usdt_text_ru, language=None)
        
        with col_copy4:
            if st.button("üá∫üá∏ Copy En", key="copy_thb_to_usdt_en", use_container_width=True):
                thb_to_usdt_text_en = f"""üí± USDT ‚Üí THB
Client pays: {usdt_formatted_rev} USDT
Client receives: {thb_formatted_rev} ‡∏ø
Rate with margin: {fx.thb_usd * (1 - usdt_margin/100):.2f}"""
                st.success("‚úÖ Text ready for copying!")
                st.code(thb_to_usdt_text_en, language=None)

with tab2:
    st.write("**–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è RUB ‚Üî THB (–∫–ª–∏–µ–Ω—Ç –≤—Å–µ–≥–¥–∞ –æ—Ç–¥–∞—ë—Ç RUB)**")
    
    col_rub1, col_rub2 = st.columns(2)
    
    with col_rub1:
        st.write("**–°–∫–æ–ª—å–∫–æ –±–∞—Ç –Ω—É–∂–Ω–æ –∫–ª–∏–µ–Ω—Ç—É?**")
        thb_needed_rub = st.number_input("–°–∫–æ–ª—å–∫–æ THB –Ω—É–∂–Ω–æ?", value=30000.0, step=1000.0, key="thb_needed_rub")
        # –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ RUB –¥–æ–ª–∂–µ–Ω –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç
        rub_to_pay = thb_needed_rub * (fx.usd_rub_base * (1 + rub_margin/100)) / fx.thb_usd
        # –û–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö –≤ –ø–æ–ª—å–∑—É –∫–ª–∏–µ–Ω—Ç–∞ (–∫–ª–∏–µ–Ω—Ç –ø–ª–∞—Ç–∏—Ç –ë–û–õ–¨–®–ï)
        rub_to_pay = math.ceil(rub_to_pay)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
        thb_formatted_rub = f"{thb_needed_rub:,.0f}" if thb_needed_rub.is_integer() else f"{thb_needed_rub:,.2f}"
        rub_formatted = f"{rub_to_pay:,.0f}"
        
        # –ö—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        st.info(f"""
        **üíµ RUB ‚Üí THB**
        
        **–ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç:** {thb_formatted_rub} ‡∏ø  
        **–ö–ª–∏–µ–Ω—Ç –ø–ª–∞—Ç–∏—Ç:** {rub_formatted} RUB  
        **–ö—É—Ä—Å —Å –º–∞—Ä–∂–µ–π:** {(fx.usd_rub_base * (1 + rub_margin/100)) / fx.thb_usd:.5f} RUB/THB
        """)
        
        # –ö–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä—è–¥
        col_copy5, col_copy6 = st.columns(2)
        with col_copy5:
            if st.button("üá∑üá∫ Copy Ru", key="copy_rub_to_thb_ru", use_container_width=True):
                rub_to_thb_text_ru = f"""üíµ {rub_formatted} RUB -> {thb_formatted_rub} THB
–ö—É—Ä—Å —Å –º–∞—Ä–∂–µ–π: {(fx.usd_rub_base * (1 + rub_margin/100)) / fx.thb_usd:.5f} RUB/THB"""
                st.success("‚úÖ –¢–µ–∫—Å—Ç –≥–æ—Ç–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è!")
                st.code(rub_to_thb_text_ru, language=None)
        
        with col_copy6:
            if st.button("üá∫üá∏ Copy En", key="copy_rub_to_thb_en", use_container_width=True):
                rub_to_thb_text_en = f"""üíµ {rub_formatted} RUB -> {thb_formatted_rub} THB
Rate with margin: {(fx.usd_rub_base * (1 + rub_margin/100)) / fx.thb_usd:.5f} RUB/THB"""
                st.success("‚úÖ Text ready for copying!")
                st.code(rub_to_thb_text_en, language=None)
    
    with col_rub2:
        st.write("**–°–∫–æ–ª—å–∫–æ RUB —É –∫–ª–∏–µ–Ω—Ç–∞?**")
        rub_available = st.number_input("–°–∫–æ–ª—å–∫–æ RUB —É –∫–ª–∏–µ–Ω—Ç–∞?", value=100000.0, step=10000.0, key="rub_available")
        # –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ THB –ø–æ–ª—É—á–∏—Ç –∫–ª–∏–µ–Ω—Ç
        thb_received_rub = rub_available / ((fx.usd_rub_base * (1 + rub_margin/100)) / fx.thb_usd)
        # –û–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑ –≤ –ø–æ–ª—å–∑—É –∫–ª–∏–µ–Ω—Ç–∞ (–∫–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç –ú–ï–ù–¨–®–ï)
        thb_received_rub = math.floor(thb_received_rub)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
        rub_formatted_rev = f"{rub_available:,.0f}" if rub_available.is_integer() else f"{rub_available:,.2f}"
        thb_formatted_rub_rev = f"{thb_received_rub:,.0f}"
        
        # –ö—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        st.info(f"""
        **üíµ RUB ‚Üí THB**
        
        **–ö–ª–∏–µ–Ω—Ç –ø–ª–∞—Ç–∏—Ç:** {rub_formatted_rev} RUB  
        **–ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç:** {thb_formatted_rub_rev} ‡∏ø  
        **–ö—É—Ä—Å —Å –º–∞—Ä–∂–µ–π:** {(fx.usd_rub_base * (1 + rub_margin/100)) / fx.thb_usd:.5f} RUB/THB
        """)
        
        # –ö–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä—è–¥
        col_copy7, col_copy8 = st.columns(2)
        with col_copy7:
            if st.button("üá∑üá∫ Copy Ru", key="copy_thb_to_rub_ru", use_container_width=True):
                thb_to_rub_text_ru = f"""üíµ {rub_formatted_rev} RUB -> {thb_formatted_rub_rev} THB
–ö—É—Ä—Å —Å –º–∞—Ä–∂–µ–π: {(fx.usd_rub_base * (1 + rub_margin/100)) / fx.thb_usd:.5f} RUB/THB"""
                st.success("‚úÖ –¢–µ–∫—Å—Ç –≥–æ—Ç–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è!")
                st.code(thb_to_rub_text_ru, language=None)
        
        with col_copy8:
            if st.button("üá∫üá∏ Copy En", key="copy_thb_to_rub_en", use_container_width=True):
                thb_to_rub_text_en = f"""üíµ {rub_formatted_rev} RUB -> {thb_formatted_rub_rev} THB
Rate with margin: {(fx.usd_rub_base * (1 + rub_margin/100)) / fx.thb_usd:.5f} RUB/THB"""
                st.success("‚úÖ Text ready for copying!")
                st.code(thb_to_rub_text_en, language=None)

st.divider()

# ---------- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä–∂–µ ----------
st.subheader("üìä –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã —Å –º–∞—Ä–∂–µ–π")

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã —Å –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω–æ–π –º–∞—Ä–∂–µ–π
usd_thb_with_margin = fx.thb_usd * (1 - usdt_margin/100)
rub_thb_with_margin = (fx.usd_rub_base * (1 + rub_margin/100)) / fx.thb_usd

calc_df = pd.DataFrame([
    {"–ü–∞—Ä–∞":"USDT‚ÜíTHB","Base":fx.thb_usd, "With Margin": usd_thb_with_margin, "Margin %": usdt_margin},
    {"–ü–∞—Ä–∞":"RUB‚ÜíTHB","Base":fx.conversion_rate_base, "With Margin": rub_thb_with_margin, "Margin %": rub_margin},
]).set_index("–ü–∞—Ä–∞").round(4)

st.table(calc_df)

st.caption("–õ–æ–≥–∏–∫–∞: usd_rub_base = Rapira*1.04, thb_usd ‚Äî Bitkub. –ú–∞—Ä–∂–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–∞–∫ fee –∫ USDT‚ÜíTHB –∏ –∫–∞–∫ –Ω–∞—Ü–µ–Ω–∫–∞ –∫ RUB‚ÜíTHB.")

# ---------- JSON –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è/–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π ----------
json_dict: Dict[str, Any] = fx.model_dump()
json_dict.update({
    "usdt_thb_with_margin": round(usd_thb_with_margin, 3),
    "rub_thb_with_margin": round(rub_thb_with_margin, 3),
    "usdt_margin_percent": usdt_margin,
    "rub_margin_percent": rub_margin,
})

#st.subheader("üß© JSON (–¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π)")
#st.code(__import__("json").dumps(json_dict, ensure_ascii=False, indent=2), language="json")

# –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
#st.download_button(
#    label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å JSON",
#    file_name="fx_rates.json",
#    mime="application/json",
#    data=__import__("json").dumps(json_dict, ensure_ascii=False, indent=2).encode("utf-8"),
#)

#st.caption("–ì–æ—Ç–æ–≤–æ. –í–µ—Å—å —Ä–∞—Å—á—ë—Ç –Ω–∞ Python, –±–µ–∑ PHP.")
# –¢–µ—Å—Ç –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ - –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
