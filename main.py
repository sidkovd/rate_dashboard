# fx_dashboard_app.py ‚Äî –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å –ª–æ–≥–∏–∫–∏ –∏–∑ PHP –≤ Python (Streamlit)
# macOS: pip install streamlit requests pandas pydantic python-dotenv
# –ó–∞–ø—É—Å–∫: streamlit run main.py

import hmac
import hashlib
import time
import os
from typing import Dict, Any, Optional

import requests
import streamlit as st
import pandas as pd
from pydantic import BaseModel
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

st.set_page_config(page_title="FX Dashboard (Python-only)", layout="wide")
st.title("üí± FX Dashboard ‚Äî Python only")
st.caption("–ö—É—Ä—Å—ã –∏–∑ Bitkub + Rapira –±–µ–∑ PHP, —Ä–∞—Å—á—ë—Ç –º–∞—Ä–∂–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö –ø—Ä—è–º–æ –≤ Python.")

# ---------- –ö–æ–Ω—Ñ–∏–≥ –≤ —Å–∞–π–¥–±–∞—Ä–µ ----------
st.sidebar.header("üîß –ò—Å—Ç–æ—á–Ω–∏–∫–∏ API")
rapira_url = st.sidebar.text_input(
    "Rapira rates endpoint",
    value=os.getenv("RAPIRA_URL", "https://api.rapira.net/open/market/rates"),
)

bitkub_server_time_url = st.sidebar.text_input(
    "Bitkub server time",
    value=os.getenv("BITKUB_SERVER_TIME_URL", "https://api.bitkub.com/api/servertime"),
)
bitkub_ticker_url = st.sidebar.text_input(
    "Bitkub ticker (THB_USDT)",
    value=os.getenv("BITKUB_TICKER_URL", "https://api.bitkub.com/api/market/ticker?sym=THB_USDT"),
)

st.sidebar.subheader("Bitkub auth (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
bitkub_api_key = st.sidebar.text_input("X-BTK-APIKEY", value=os.getenv("BITKUB_API_KEY", ""), type="password")
bitkub_api_secret = st.sidebar.text_input("X-BTK-SECRET", value=os.getenv("BITKUB_API_SECRET", ""), type="password")

st.sidebar.subheader("–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è Bitkub")
subtract_const = st.sidebar.number_input("–í—ã—á–µ—Å—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –∏–∑ THB_USDT", value=float(os.getenv("SUBTRACT_CONST", "0.1")), step=0.01)

st.sidebar.subheader("–ú–∞—Ä–∂–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
default_margin = st.sidebar.number_input("% –º–∞—Ä–∂–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)", value=float(os.getenv("DEFAULT_MARGIN", "3.5")), step=0.1)

# ---------- –ú–æ–¥–µ–ª–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã ----------
class FxResult(BaseModel):
    usd_rub_base: float
    usd_rub_plus_3_5: float
    usd_rub_plus_7: float

    thb_usd: float
    thb_usd_2_5: float
    thb_usd_2_75: float
    thb_usd_3: float

    conversion_rate_base: float  # RUB/THB –±–µ–∑ –º–∞—Ä–∂–∏
    conversion_rate_plus_3_5: float
    conversion_rate_plus_4: float
    conversion_rate_plus_5: float
    conversion_rate_plus_6: float
    conversion_rate_plus_7: float

    rate: float  # –æ—Å–Ω–æ–≤–Ω–æ–π (—Å 3.5%)


def sign_bitkub(timestamp: str, method: str, path_and_query: str, secret: str) -> str:
    payload = f"{timestamp}{method}{path_and_query}"
    return hmac.new(secret.encode(), payload.encode(), hashlib.sha256).hexdigest()


def fetch_bitkub_thb_usdt(
    server_time_url: str,
    ticker_url: str,
    api_key: Optional[str] = None,
    api_secret: Optional[str] = None,
) -> float:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–Ω—É THB_USDT['last']. –ï—Å–ª–∏ –Ω–µ —É–¥–∞—ë—Ç—Å—è –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏, –ø—Ä–æ–±—É–µ—Ç —Å –ø–æ–¥–ø–∏—Å—å—é (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–ª—é—á–∏)."""
    # 1) –ü—ã—Ç–∞–µ–º—Å—è –±–µ–∑ –ø–æ–¥–ø–∏—Å–µ–π
    try:
        r = requests.get(ticker_url, timeout=10)
        r.raise_for_status()
        data = r.json()
        last = float(data["THB_USDT"]["last"])  # Bitkub —Ñ–æ—Ä–º–∞—Ç –∫–∞–∫ –≤ PHP
        return last
    except Exception:
        pass

    # 2) –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    if not api_key or not api_secret:
        raise RuntimeError("Bitkub —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–ø–∏—Å—å: —É–∫–∞–∂–∏ API KEY –∏ SECRET –∏–ª–∏ —Å–¥–µ–ª–∞–π endpoint –ø—É–±–ª–∏—á–Ω—ã–º")

    ts = requests.get(server_time_url, timeout=10).text.strip()
    # –í—ã—Ä–µ–∑–∞–µ–º –ø—É—Ç—å –∏ query –∏–∑ –ø–æ–ª–Ω–æ–≥–æ URL
    # –ù–∞–ø—Ä–∏–º–µ—Ä: https://api.bitkub.com/api/market/ticker?sym=THB_USDT -> /api/market/ticker?sym=THB_USDT
    path_and_query = "/" + ticker_url.split("//", 1)[-1].split("/", 1)[-1]
    signature = sign_bitkub(ts, "GET", path_and_query, api_secret)

    headers = {
        "Accept": "application/json",
        "Content-type": "application/json",
        "X-BTK-APIKEY": api_key,
        "X-BTK-TIMESTAMP": ts,
        "X-BTK-SIGN": signature,
    }
    r = requests.get(ticker_url, headers=headers, timeout=10)
    r.raise_for_status()
    data = r.json()
    last = float(data["THB_USDT"]["last"])  # –∫–∞–∫ –≤ PHP
    return last


def fetch_rapira_usdt_rub(rapira_url: str) -> float:
    r = requests.get(rapira_url, timeout=10)
    r.raise_for_status()
    payload = r.json()
    items = payload.get("data") or []
    for it in items:
        if it.get("symbol") == "USDT/RUB":
            bid = float(it["bidPrice"])  # –∫–∞–∫ –≤ PHP –±–µ—Ä—ë–º bidPrice
            return bid
    raise RuntimeError("USDT/RUB –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ Rapira")


def compute_rates(rapira_usd_rub: float, thb_usd: float) -> FxResult:
    usd_rub_base = round(rapira_usd_rub * 1.04, 2)  # –∫–∞–∫ –≤ —Ç–≤–æ—ë–º PHP getRapiraUsdRubRate()

    res = FxResult(
        usd_rub_base=round(usd_rub_base, 3),
        usd_rub_plus_3_5=round(usd_rub_base * 1.035, 3),
        usd_rub_plus_7=round(usd_rub_base * 1.07, 3),
        thb_usd=round(thb_usd, 2),
        thb_usd_2_5=round(thb_usd * 0.975, 3),
        thb_usd_2_75=round(thb_usd * 0.9725, 3),
        thb_usd_3=round(thb_usd * 0.97, 3),
        conversion_rate_base=round(usd_rub_base / thb_usd, 3),
        conversion_rate_plus_3_5=round((usd_rub_base * 1.035) / thb_usd, 3),
        conversion_rate_plus_4=round((usd_rub_base * 1.04) / thb_usd, 3),
        conversion_rate_plus_5=round((usd_rub_base * 1.05) / thb_usd, 3),
        conversion_rate_plus_6=round((usd_rub_base * 1.06) / thb_usd, 3),
        conversion_rate_plus_7=round((usd_rub_base * 1.07) / thb_usd, 3),
        rate=round((usd_rub_base * 1.035) / thb_usd, 3),
    )
    return res

# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ä–∞—Å—á—ë—Ç ----------
colA, colB, colC = st.columns([1,1,1])
with colA:
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å", use_container_width=True):
        st.experimental_rerun()

# –¢—è–Ω–µ–º –¥–∞–Ω–Ω—ã–µ
try:
    thb_usdt_last = fetch_bitkub_thb_usdt(
        bitkub_server_time_url,
        bitkub_ticker_url,
        bitkub_api_key or None,
        bitkub_api_secret or None,
    )
    thb_usdt_last = round(thb_usdt_last - float(subtract_const), 2)
    rapira_usdt_rub = fetch_rapira_usdt_rub(rapira_url)
    fx = compute_rates(rapira_usdt_rub, thb_usdt_last)
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏/—Ä–∞—Å—á—ë—Ç–∞: {e}")
    st.stop()

# ---------- –í—ã–≤–æ–¥ –±–∞–∑–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π ----------
col1, col2, col3 = st.columns(3)
col1.metric("usdt_rub_base (RUB –∑–∞ 1 USDT)", f"{fx.usd_rub_base:.3f}")
col2.metric("thb_usdt (THB –∑–∞ 1 USDT)", f"{fx.thb_usd:.3f}")
col3.metric("RUB‚ÜíTHB (–±–µ–∑ –º–∞—Ä–∂–∏)", f"{fx.conversion_rate_base:.3f}")

st.divider()

# ---------- –ú–∞—Ä–∂–∞ –∏ –ø–µ—Ä–µ—Å—á—ë—Ç ----------
margin = st.number_input("% –º–∞—Ä–∂–∏ (–Ω–∞ RUB —á–∞—Å—Ç—å –¥–ª—è RUB‚ÜíTHB –∏ –∫–∞–∫ fee –¥–ª—è USD‚ÜíTHB)", value=float(default_margin), step=0.1)

usd_thb_with_margin = fx.thb_usd * (1 - margin/100)
rub_thb_with_margin = (fx.usd_rub_base * (1 + margin/100)) / fx.thb_usd

calc_df = pd.DataFrame([
    {"–ü–∞—Ä–∞":"USDT‚ÜíTHB","Base":fx.thb_usd, "With Margin": usd_thb_with_margin},
    {"–ü–∞—Ä–∞":"RUB‚ÜíTHB","Base":fx.conversion_rate_base, "With Margin": rub_thb_with_margin},
]).set_index("–ü–∞—Ä–∞").round(4)

st.subheader("üìä –†–∞—Å—á—ë—Ç–Ω—ã–µ –∫—É—Ä—Å—ã —Å –º–∞—Ä–∂–µ–π")
st.table(calc_df)

st.caption("–õ–æ–≥–∏–∫–∞ –∏–¥–µ–Ω—Ç–∏—á–Ω–∞ PHP: usd_rub_base = Rapira*1.04, thb_usd ‚Äî Bitkub (–º–∏–Ω—É—Å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞). –ú–∞—Ä–∂–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–∞–∫ fee –∫ USD‚ÜíTHB –∏ –∫–∞–∫ –Ω–∞—Ü–µ–Ω–∫–∞ –∫ RUB‚ÜíTHB.")

# ---------- JSON –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è/–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π ----------
json_dict: Dict[str, Any] = fx.model_dump()
json_dict.update({
    "usd_thb_with_margin": round(usd_thb_with_margin, 3),
    "rub_thb_with_margin": round(rub_thb_with_margin, 3),
    "margin_percent": margin,
})

#st.subheader("üß© JSON (–¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π)")
#st.code(__import__("json").dumps(json_dict, ensure_ascii=False, indent=2), language="json")

# –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
st.download_button(
    label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å JSON",
    file_name="fx_rates.json",
    mime="application/json",
    data=__import__("json").dumps(json_dict, ensure_ascii=False, indent=2).encode("utf-8"),
)

st.caption("–ì–æ—Ç–æ–≤–æ. –í–µ—Å—å —Ä–∞—Å—á—ë—Ç –Ω–∞ Python, –±–µ–∑ PHP.")
